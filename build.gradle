
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.2.2"
    }
}


plugins {
    id "org.gradle.toolchains.foojay-resolver-convention" version "0.9.0" apply false
    id "com.github.spotbugs"                            version "5.1.3" apply false
    id "com.diffplug.spotless"                          version "7.0.2" apply false
}


allprojects {
    repositories {
        mavenLocal()
        maven {
            url "https://maven.rblb.it/NostrGameEngine/libdatachannel-java"
        }
        google()
        mavenCentral()
    }
}

def applyConf(proj, isAndroid){
    // java only
    if(!isAndroid){
        proj.java {
            withJavadocJar()
            withSourcesJar()
        }
        proj.apply plugin: "com.github.spotbugs"

    }

    // android only
    if(isAndroid){
        proj.eclipse {
            classpath {
                downloadSources = true
                downloadJavadoc = true
                file {
                    whenMerged { classpathDef ->
                        def sourceEntry = new org.gradle.plugins.ide.eclipse.model.SourceFolder(
                            "src/main/java",  null
                        )
                        sourceEntry.entryAttributes["optional"] = "true"
                        classpathDef.entries.add(sourceEntry)

                        classpathDef.entries.add(
                            new org.gradle.plugins.ide.eclipse.model.Library(
                                fileReference(
                                    file("${System.getenv("ANDROID_HOME")}/platforms/android-34/android.jar")
                                )
                            )
                        )

                        classpathDef.entries.add(
                            new org.gradle.plugins.ide.eclipse.model.ProjectDependency("/nge-platform-common")
                        )
                        classpathDef.entries.add(
                            new org.gradle.plugins.ide.eclipse.model.ProjectDependency("/nge-platform-jvm")
                        )
                    }
                }
            }
        }
    }
    
    // common    
    proj.apply plugin: "com.diffplug.spotless"
    proj.apply plugin: "maven-publish"

    proj.tasks.withType(Javadoc).configureEach { Javadoc javadocTask ->
        javadocTask.options.encoding   = "UTF-8"
        javadocTask.destinationDir     = file("${proj.rootDir}/dist/javadoc/${proj.name}")
    }

    proj.afterEvaluate {
        proj.publishing {
            publications {
                mavenJava(MavenPublication) {
                    if (proj.plugins.hasPlugin("java-library")) {
                        from(proj.components.java)
                    }
                    else if (proj.plugins.hasPlugin("com.android.library")) {
                        from(proj.components["release"])
                    }

                    groupId    = proj.group.toString()
                    artifactId = proj.name
                    version    = proj.version.toString()

                    pom {
                        name        = proj.name
                        description = "Nostr Game Engine platform libraries"
                        url         = "https://github.com/NostrGameEngine/nge-platforms"
                        licenses {
                            license {
                                name = "BSD 3-Clause License"
                                url  = "https://opensource.org/licenses/BSD-3-Clause"
                            }
                        }
                    }
                }
            }
            repositories {
                mavenLocal()
                maven {
                    name = "distFolder"
                    url  = uri("file://${proj.rootDir}/dist")
                }
                if (System.getenv("GITHUB_REGISTRY") != null) {
                    maven {
                        name = "GitHubPackages"
                        url  = uri(
                            "https://maven.pkg.github.com/" + System.getenv("GITHUB_REGISTRY")
                        )
                        credentials {
                            username = System.getenv("GITHUB_USERNAME") ?: ""
                            password = System.getenv("GITHUB_TOKEN")   ?: ""
                        }
                    }
                }
            }
        }

        proj.tasks.register("outputCoordinates") {
            dependsOn proj.tasks.withType(PublishToMavenRepository)
            dependsOn proj.tasks.withType(PublishToMavenLocal)
            doLast {
                proj.publishing.publications.forEach { publication ->
                    if (publication instanceof MavenPublication) {
                        println ""
                        println "=========== Published Artifact Coordinates ==========="
                        println "Group ID:    ${publication.groupId}"
                        println "Artifact ID: ${publication.artifactId}"
                        println "Version:     ${publication.version}"
                        println "Maven:       ${publication.groupId}:${publication.artifactId}:${publication.version}"
                        println "Gradle:      implementation '${publication.groupId}:${publication.artifactId}:${publication.version}'"
                        println "===================================================="
                        println ""
                    }
                }
            }
        }

        proj.tasks.withType(PublishToMavenRepository).configureEach { publishTask ->
            publishTask.finalizedBy(proj.tasks.named("outputCoordinates"))
        }
        proj.tasks.withType(PublishToMavenLocal).configureEach { publishLocalTask ->
            publishLocalTask.finalizedBy(proj.tasks.named("outputCoordinates"))
        }

        proj.tasks.register("generateBuildDate") {
            def outputDir  = file("${proj.buildDir}/generated-resources/build-date/${proj.name}")
            def outputFile = file("${outputDir}/build.date")

            outputs.file(outputFile)

            doLast {
                outputDir.mkdirs()
                outputFile.text = java.time.LocalDate.now().toString()
            }
        }

        if(!isAndroid){
            proj.tasks.named("processResources").configure { copySpec ->
                dependsOn(proj.tasks.named("generateBuildDate"))
                copySpec.duplicatesStrategy = DuplicatesStrategy.INCLUDE
                copySpec.from("${proj.buildDir}/generated-resources/build-date") {
                    into("") 
                }
            }
        }
    }

} 


subprojects { proj ->
    def projectVersion = System.getenv("VERSION")
    if (projectVersion == null || projectVersion.trim().isEmpty()) {
        projectVersion = "0.0.0-SNAPSHOT"
    }
    def projectGroup = System.getenv("GROUP") ?: "org.ngengine"

    proj.version = projectVersion
    proj.group   = projectGroup

    proj.apply plugin: "eclipse"
    proj.eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    
    proj.plugins.withId('java-library') {
        applyConf(proj, false);     
    }

    proj.plugins.withId('com.android.library') {
        applyConf(proj, true);
    }


    proj.plugins.withId("com.github.spotbugs") {
        proj.spotbugs {
            ignoreFailures = true
            reportLevel     = com.github.spotbugs.snom.Confidence.valueOf("MEDIUM")
            toolVersion     = "4.9.3"
            excludeFilter   = file("${proj.rootDir}/spotbugs-exclude.xml")
        }
        proj.spotbugsTest {
            enabled = false
        }
        proj.dependencies {
            spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0"
        }
        proj.tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach { task ->
            task.reports {
                html {
                    enabled     = true
                    destination = file("${proj.rootDir}/reports/spotbugs/${task.name}.html")
                }
                sarif {
                    enabled     = true
                    destination = file("${proj.rootDir}/reports/spotbugs/${task.name}.sarif")
                }
            }
        }
    }

  
    proj.plugins.withId("com.diffplug.spotless") {
        proj.spotless {
            java {
                importOrder()
                removeUnusedImports()
                cleanthat()
                prettier(["prettier": "2.8.8", "prettier-plugin-java": "2.2.0"])
                    .config(["parser": "java", "tabWidth": 4, "printWidth": 128])
                formatAnnotations()

                // Insert the LICENSE text (root/LICENSE) as a Javadocâ€‘style header
                def licenseText = file("${proj.rootDir}/LICENSE").text
                def wrapped     = licenseText.readLines().collect { " * " + it }.join("\n")
                def header      = "/**\n" + wrapped + "\n */"
                licenseHeader(header, "package ")
            }
        }
    }
} 
