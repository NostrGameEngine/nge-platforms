

plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.9.0'    
    id 'com.github.spotbugs' version '5.1.3' apply false
    id 'com.diffplug.spotless' version '7.0.2' apply false
 }



gradle.allprojects { proj ->
    def projectVersion = System.getenv("VERSION") 
    if (projectVersion == null || projectVersion.isEmpty()) {
        projectVersion = "0.0.0-SNAPSHOT"
    }

    def projectGroup = System.getenv("GROUP") ?: "org.ngengine"
    proj.version = projectVersion
    proj.group = projectGroup
    
    def isSnapshot = projectVersion.endsWith("-SNAPSHOT")


    proj.plugins.withId('java-library') {
        proj.apply plugin: 'com.github.spotbugs'
        proj.apply plugin: 'com.diffplug.spotless'
        proj.apply plugin: 'maven-publish'

      
        if (!isSnapshot) {
            proj.java {
                withJavadocJar()
                withSourcesJar()
            }
        } else {
            proj.java {
            }
        }

        proj.tasks.withType(Javadoc) {
            options.encoding = 'UTF-8'
            destinationDir = new File(proj.rootDir, "dist/javadoc/${proj.name}")
        }
        
        proj.afterEvaluate {
            proj.publishing {
                publications {
                    mavenJava(MavenPublication) {
                        from proj.components.java

                      
                        
                        pom {
                            name = proj.name
                            description = "Nostr Game Engine platform libraries"
                            url = "https://github.com/NostrGameEngine/nge-platforms"
                            licenses {
                                license {
                                    name = "BSD 3-Clause License"
                                    url = "https://opensource.org/licenses/BSD-3-Clause"
                                }
                            }
                        }
                    }
                }
                repositories {
                    mavenLocal()
                    maven {
                        name = 'distFolder'
                        url = "file://${project.rootDir}/dist"
                    }
                }
            }

            if(System.getenv("GITHUB_REGISTRY") != null) {
                proj.publishing {
                    repositories {
                        maven {
                            name = "GitHubPackages"
                            url = uri(
                                "https://maven.pkg.github.com/" + System.getenv("GITHUB_REGISTRY")  
                            ) 
                            credentials {
                                username = System.getenv("GITHUB_USERNAME") ?: ""
                                password = System.getenv("GITHUB_TOKEN") ?: ""
                            }
                        }
                    }
                }
            }
            
            // Add a task to output artifact coordinates after publishing
            proj.tasks.register('outputCoordinates') {
                dependsOn proj.tasks.withType(PublishToMavenRepository)
                dependsOn proj.tasks.withType(PublishToMavenLocal)
                doLast {
                    proj.publishing.publications.forEach { publication ->
                        if (publication instanceof MavenPublication) {
                            println ""
                            println "=========== Published Artifact Coordinates ==========="
                            println "Group ID:    ${publication.groupId}"
                            println "Artifact ID: ${publication.artifactId}"
                            println "Version:     ${publication.version}"
                            println "Maven:       ${publication.groupId}:${publication.artifactId}:${publication.version}"
                            println "Gradle:      implementation '${publication.groupId}:${publication.artifactId}:${publication.version}'"
                            println "===================================================="
                            println ""
                        }
                    }
                }
            }
            
            // Make publish tasks finalize with the coordinates output
            proj.tasks.withType(PublishToMavenRepository).configureEach { task ->
                task.finalizedBy(proj.tasks.outputCoordinates)
            }
            
            proj.tasks.withType(PublishToMavenLocal).configureEach { task ->
                task.finalizedBy(proj.tasks.outputCoordinates)
            }
            proj.tasks.register('generateBuildDate') {
                // Create the build date file in a temporary directory
                // Use group/project structure for scoping
                def groupPath = proj.group.toString().replace('.', '/')
                def outputDir = file("${proj.buildDir}/generated-resources/build-date/${proj.name}")
                def outputFile = file("${outputDir}/build.date")
                
                outputs.file(outputFile)
                
                doLast {
                    outputDir.mkdirs()
                    outputFile.text = java.time.LocalDate.now().toString()
                }
            }

            // Update processResources to copy the file 
            proj.tasks.named('processResources').configure {
                dependsOn proj.tasks.named('generateBuildDate')
                
                // Use newer files for duplicates
                duplicatesStrategy = DuplicatesStrategy.INCLUDE
                
                // Add the generated directory as an extra resource
                from("${proj.buildDir}/generated-resources/build-date") {
                    into("") // Put at the root of the JAR
                }
            }

        }
    }
}


rootProject.name = 'nge-platforms'

include('nge-platform-common')
include('nge-platform-jvm')
    
gradle.allprojects { proj ->
    proj.plugins.withId('com.github.spotbugs') {
        proj.spotbugs {
            ignoreFailures = true
            reportLevel = com.github.spotbugs.snom.Confidence.valueOf("MEDIUM")
            toolVersion = '4.9.3'
            excludeFilter = new File(proj.rootDir, "spotbugs-exclude.xml")
        }
        proj.tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach { task ->
            task.reports {
                html {
                    enabled = true
                    destination = file("${proj.rootDir}/reports/spotbugs/${task.name}.html")
                }
                sarif {
                    enabled = true
                    destination = file("${proj.rootDir}/reports/spotbugs/${task.name}.sarif")
                }
            }
        }
        
        
        proj.spotbugsTest {
            enabled = false
        }
        
        proj.dependencies {
            spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
        }
    }
    
    proj.plugins.withId('com.diffplug.spotless') {
        proj.spotless {
            java {
                importOrder()
                removeUnusedImports()
                cleanthat()
                prettier(['prettier': '2.8.8', 'prettier-plugin-java': '2.2.0'])
                    .config(['parser': 'java', 'tabWidth': 4, 'printWidth': 128])
                formatAnnotations()
                
                def licenseText = new File(proj.rootDir, "LICENSE").text
                def wrapped = licenseText.readLines().collect { " * " + it }.join("\n")
                def header = "/**\n" + wrapped + "\n */"
                licenseHeader(header, "package ")
            }
        }
    }
}
